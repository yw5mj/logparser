#! /bin/env python

from ROOT import *
from commands import getoutput
from array import array
from sys import argv, stderr


if len(argv)>1:
    path=argv[1]
    if path[-1]!='/':
        path+='/'
    basetime=int(getoutput('date -d {0} +%s'.format(path.split('/')[-2])))
else:
    path='./'
    basetime=1438763742

def getdata(string,base=10):
    adctmps=getoutput("grep -H 'get {0}' {1}*.log".format(string,path)).split('\n')
    times=array("d")
    temps=array("d")
    for tmp in adctmps:
        if 'ERROR!!' in tmp: continue
        timest=tmp.split('/')[-1].split('.log:')[0].replace('_',' ')
        tmpst=tmp.split()[-1]
        hm=getoutput('date -d "{0}" +%s'.format(timest[:-2]))
        time=float(hm)+float(timest[-2:])-basetime
        temps.append(float(tmpst) if base==10 else int(tmpst,base))
        times.append(time/3600)
    if len(times)==0:
        print >> stderr, 'ERROR: {0} has no data'.format(string)
        return TGraph()
    adctt=TGraph(len(times),times,temps)
    adctt.SetTitle('{0} vs t;t/h;'.format(string))
    return adctt

def getmode(string,base=10):
    li=list(set(getoutput("grep {0} ".format(string)+path+"*.log|awk '{print $2}'").split('\n')))
    if li==['']:
        print >> stderr, 'ERROR: {0} has no data'.format(string)
        return []
    return [(i,getdata(i,base)) for i in li]

def adcwr(string,maxi,mini):
    adctt=getmode(string)
    res=[]
    for i in adctt:
        if i[1].GetN():
            i[1].SetMinimum(mini)
            i[1].SetMaximum(maxi)
            i[1].SetMarkerStyle(7)
            res.append(i)
    return res

def readvolt(cc):
    cc.cd()
    label=['VIN_voltage_f','3V3_voltage_f','2V5_voltage_f','1V5_voltage_f','1V2_voltage_f']
    hfn={}
    for i in range(len(label)):
        ovol=getmode(label[i])
        for n in ovol:
            if not n[1].GetN(): continue
            st=n[0].split('-')[0]
            if not st in hfn.keys():
                hfn[st]=[TLegend(.8,.8,1,1)]
            n[1].SetLineColor(len(hfn[st]))
            n[1].SetFillColor(0)
            n[1].SetTitle(st+' V vs t;t/h;V/V')
            hfn[st].append(n[1])
            hfn[st][0].AddEntry(n[1],n[0])
    for k in hfn.keys():
        for i in range(1,len(hfn[k])):
            if i==1:
                hfn[k][i].SetMinimum(0)
                hfn[k][i].SetMaximum(10)
                hfn[k][i].Draw("al")
            else:
                hfn[k][i].Draw("same")
        hfn[k][0].Draw('same')
        c0.Print(path+k+'Vvst.png')

def readcurr(cc):
    cc.cd()
    label=['VIN_current_f','3V3_current_f','2V5_current_f','1V5_current_f']
    hfn={}
    for i in range(len(label)):
        ocur=getmode(label[i])
        for n in ocur:
            if not n[1].GetN(): continue
            st=n[0].split('-')[0]
            if not st in hfn.keys():
                hfn[st]=[TLegend(.8,.8,1,1)]
            n[1].SetLineColor(len(hfn[st]))
            n[1].SetFillColor(0)
            n[1].SetTitle(st+' I vs t;t/h;I/A')
            hfn[st].append(n[1])
            hfn[st][0].AddEntry(n[1],n[0])
    for k in hfn.keys():
        for i in range(1,len(hfn[k])):
            if i==1:
                hfn[k][i].SetMinimum(0)
                hfn[k][i].SetMaximum(4)
                hfn[k][i].Draw("al")
            else:
                hfn[k][i].Draw("same")
        hfn[k][0].Draw('same')
        c0.Print(path+k+'Ivst.png')


def adcplt(crsl):
    files=getoutput("grep -H 'crate,slot{0}' {1}*.log|grep links".format(crsl,path)).split('\n')
    adcar=[(array('d'),array('d'),array('d'),array('d'),array('d'),array('d')) for i in range(24)]
    linold=[]
    for onefile in files:
        onename=onefile.split(":")[0]
        linnum=eval(onefile.split(":")[-1])
        timest=onename.split('/')[-1][:-4].replace('_',' ')
        if linold!=linnum:
            print >> stderr,'WARNING: slot{2} active links are {0} at {1}'.format(linnum,timest,crsl)
            linold=linnum
        if linnum==[]:
            continue
        hm=getoutput('date -d "{0}" +%s'.format(timest[:-2]))
        time=float(hm)+float(timest[-2:])-basetime
        adcs=eval(getoutput('grep "crate,slot{0}" {1}|grep meanADC'.format(crsl,onename)).split(':')[-1])
        rbt=eval(getoutput('grep "crate,slot{0}" {1}|grep orbit'.format(crsl,onename)).split(':')[-1])
        for i in range(len(linnum)):
            adcar[linnum[i]][4].append(time/3600)
            adcar[linnum[i]][5].append(float(rbt[i]))
            for ch in range(4):
                adcar[linnum[i]][ch].append(float(adcs[i][ch]))
    adccg={}
    for i in range(24):
        if adcar[i]==(array('d'),array('d'),array('d'),array('d'),array('d'),array('d')):continue
        adccg[i]=[]
        for ch in range(4):
            adccg[i].append(TGraph(len(adcar[i][4]),adcar[i][4],adcar[i][ch]))
            adccg[i][ch].SetTitle('{2}mean ADC link{0}ch{1};t/h;ADC'.format(i,ch,crsl))
            adccg[i][ch].SetMinimum(0)
        adccg[i].append(TGraph(len(adcar[i][4]),adcar[i][4],adcar[i][5]))
        adccg[i][-1].SetTitle('{1}OrbitRate link{0};t/h;orbitrate'.format(i,crsl))
    return adccg

def findcs():
    files=getoutput("grep -H 'crate,slot' {0}*.log|grep links".format(path)).split('\n')
    css=set([eval(st.split('(')[1].split(')')[0]) for st in files])
    return list(css)

def getlinkdata(string,linknums):
    res={}
    for k in linknums.keys():
        linknum=linknums[k]
        adctmps=getoutput("grep -H '{0}' {1}*.log|grep '{2}'".format(string,path,k)).split('\n')
        times=array("d")
        bada=[array('d') for i in range(len(linknum))]
        for tmp in range(len(adctmps)):
            if not tmp%2:
                tmps=adctmps[tmp]
                continue
            else:
                tmps+=adctmps[tmp].split(string)[-1]
            timest=tmps.split('/')[-1].split('.log:')[0].replace('_',' ')
            hm=getoutput('date -d "{0}" +%s'.format(timest[:-2]))
            time=float(hm)+float(timest[-2:])-basetime
            times.append(time/3600)
            ba=tmps.split(string)[-1].split()
            for i in range(len(linknum)):
                bada[i].append(float(ba[linknum[i]]))
        badas=[]
        for i in range(len(linknum)):
            if not len(times):
                print >>stderr,"ERROR:{0}at link{1},{2} has no data".format(string,linknum[i],k)
                badas.append(TGraph())                
                continue
            badas.append(TGraph(len(times),times,bada[i]))
            badas[i].SetTitle('{2}{1} link_{0} vs t;t/h;{1}'.format(linknum[i],string,k))
            badas[i].SetFillColor(0)
        res[k]=badas
    return res

def getlinkFB(string,crsl):
    res={}
    for cs in crsl:
        adctmps=getoutput("grep -H '{0}' {1}*.log|grep '{2}'".format(string,path,cs)).split('\n')
        if adctmps==['']:
            print >> stderr, 'ERROR: {0} has no data for {1}'.format(string,cs)
            res[cs]=[]
            continue
        times=array("d")
        temps1=array("d")
        temps2=array("d")
        for tmp in adctmps:
            if 'ERROR!!' in tmp: continue
            timest=tmp.split('/')[-1].split('.log:')[0].replace('_',' ')
            tmpst1=tmp.split()[-2]
            tmpst2=tmp.split()[-1]
            hm=getoutput('date -d "{0}" +%s'.format(timest[:-2]))
            time=float(hm)+float(timest[-2:])-basetime
            temps1.append(float(tmpst1))
            temps2.append(float(tmpst2))
            times.append(time/3600)
        adctt=[TGraph(len(times),times,temps1),TGraph(len(times),times,temps2)]
        adctt[0].SetTitle('{0} vs t {1};t/h;{0}'.format(string,cs))
        adctt[0].SetMaximum(max(max(temps1),max(temps2)))
        adctt[0].SetMinimum(0)
        adctt[0].SetMarkerColor(2)
        adctt[1].SetMarkerColor(3)
        adctt[0].SetFillColor(0)
        adctt[1].SetFillColor(0)
        adctt[0].SetMarkerStyle(7)
        adctt[1].SetMarkerStyle(7)
        leg=TLegend(.6,.85,1,1)
        leg.AddEntry(adctt[0],"FrontFPGA "+string)
        leg.AddEntry(adctt[1],"BackFPGA "+string)
        adctt.append(leg)
        res[cs]=adctt
    return res
    

if __name__=='__main__':
    gROOT.SetBatch()
    c0=TCanvas('c0','c0',600,600)
    
    #adc/orbitrate vs time
    print '\n===reading mean adc'
    crsl=findcs()
    linknum={}
    for cs in crsl:
        adccg=adcplt(cs)
        linknum[cs]=adccg.keys()
        for k in linknum[cs]:
            for i in range(4):
                adccg[k][i].SetMarkerStyle(7)
                adccg[k][i].Draw('ap')
                c0.Print("{0}c{3}s{4}adcplt{1}ch{2}.png".format(path,k,i,cs[0],cs[1]))
            adccg[k][4].SetMarkerStyle(7)
            adccg[k][4].Draw('ap')
            c0.Print("{0}c{2}s{3}orbitrate{1}.png".format(path,k,cs[0],cs[1]))
        
    #fec error vs time
    print '\n===reading fec error'
    nglb=getmode('prbs_rx_pattern_error_cnt',16)
    for h in nglb:
        if h[1].GetN():
            h[1].SetMarkerStyle(7)
            h[1].Draw('ap')
            c0.Print('{0}{1}.png'.format(path,h[0]))

    #modes vs time
    print '\n===reading modes'
    ci=adcwr('CntrReg_CImode',1.1,-.1)
    for i in ci:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))
    lt=getmode('LinkTestMode',16)
    for i in lt:
        i[1].SetMarkerStyle(7)
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))

    #temperature vs time
    print '\n===reading temperature'
    tmpr=adcwr('B_SHT1_temp_f',50,7)
    for i in tmpr:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))
    tmpr=adcwr('bkp_temp_f',50,7)
    for i in tmpr:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))
    tmpr=adcwr('adc58_f',50,7)
    for i in tmpr:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))
    tmpr=adcwr('1wA_f',50,7)
    for i in tmpr:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))
    tmpr=adcwr('1wB_f',50,7)
    for i in tmpr:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))

    #pwrbad vs time
    print '\n===reading powerbad'
    pwrbad=adcwr('bkp_pwr_bad',1.1,-.1)
    for i in pwrbad:
        i[1].Draw("ap")
        c0.Print('{0}{1}.png'.format(path,i[0]))

    #I/V vs time
    print '\n===reading I/V information'
    readvolt(c0)
    readcurr(c0)

    #bad align vs time
    print '\n===reading bad align'
    badas=getlinkdata('Bad align',linknum)
    for k in linknum.keys():
        for n in range(len(linknum[k])):
            if not badas[k][n].GetN():
                continue
            badas[k][n].SetMarkerStyle(7)
            badas[k][n].SetMinimum(0)
            badas[k][n].Draw('ap')
            c0.Print("{0}badalign{1}at{2}.png".format(path,linknum[k][n],k))
    #bad data vs time
    print '\n===reading bad data'
    badas=getlinkdata('Bad Data',linknum)
    for k in linknum.keys():
        for n in range(len(linknum[k])):
            if not badas[k][n].GetN():
                continue
            badas[k][n].SetMarkerStyle(7)
            badas[k][n].SetMinimum(0)
            badas[k][n].Draw('ap')
            c0.Print("{0}badadata{1}at{2}.png".format(path,linknum[k][n],k))

    #Error data vs time
    print '\n===reading Error information'
    errinfo=[getlinkFB('BC0 Error',linknum.keys()),getlinkFB('Single Error',linknum.keys()),getlinkFB('Double Error',linknum.keys())]
    for k in linknum.keys():
        for i in range(3):
            if errinfo[i][k]==[]:continue
            errinfo[i][k][0].Draw('ap')
            errinfo[i][k][1].Draw('samep')
            errinfo[i][k][2].Draw('same')
            c0.Print('{0}ErrorData{1}at{2}.png'.format(path,i,k))
    




